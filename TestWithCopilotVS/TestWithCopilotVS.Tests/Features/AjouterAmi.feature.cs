// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestWithCopilotVS.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "statistiques")]
    [Xunit.TraitAttribute("Category", "amis")]
    public partial class AjouterUnNouvelAmiAUneStatistiqueDeJeuFeature : object, Xunit.IClassFixture<AjouterUnNouvelAmiAUneStatistiqueDeJeuFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "statistiques",
                "amis"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AjouterAmi.feature"
#line hidden
        
        public AjouterUnNouvelAmiAUneStatistiqueDeJeuFeature(AjouterUnNouvelAmiAUneStatistiqueDeJeuFeature.FixtureData fixtureData, TestWithCopilotVS_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr"), "Features", "Ajouter un nouvel ami à une statistique de jeu", "  En tant que gestionnaire de session de jeu\n  Je veux pouvoir ajouter un ami à l" +
                    "a liste des amis présents dans une statistique\n  Afin de garder une trace des pa" +
                    "rticipants à chaque session", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
  #line hidden
#line 10
    testRunner.Given("une nouvelle statistique de jeu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Étant donné ");
#line hidden
#line 11
    testRunner.And("la liste des amis présents est vide", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et que ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ajouter un ami avec un nom valide")]
        [Xunit.TraitAttribute("FeatureTitle", "Ajouter un nouvel ami à une statistique de jeu")]
        [Xunit.TraitAttribute("Description", "Ajouter un ami avec un nom valide")]
        public void AjouterUnAmiAvecUnNomValide()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ajouter un ami avec un nom valide", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
  this.FeatureBackground();
#line hidden
#line 14
    testRunner.Given("je souhaite ajouter un ami", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Étant donné que ");
#line hidden
#line 15
    testRunner.When("j\'ajoute l\'ami \"Alice\" à la liste des amis présents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 16
    testRunner.Then("la liste des amis présents doit contenir \"Alice\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 17
    testRunner.And("la liste des amis présents doit avoir 1 élément", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ajouter plusieurs amis à la même session")]
        [Xunit.TraitAttribute("FeatureTitle", "Ajouter un nouvel ami à une statistique de jeu")]
        [Xunit.TraitAttribute("Description", "Ajouter plusieurs amis à la même session")]
        public void AjouterPlusieursAmisALaMemeSession()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ajouter plusieurs amis à la même session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
  this.FeatureBackground();
#line hidden
#line 20
    testRunner.Given("je souhaite ajouter plusieurs amis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Étant donné que ");
#line hidden
#line 21
    testRunner.When("j\'ajoute l\'ami \"Alice\" à la liste des amis présents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 22
    testRunner.And("j\'ajoute l\'ami \"Bob\" à la liste des amis présents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 23
    testRunner.And("j\'ajoute l\'ami \"Charlie\" à la liste des amis présents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 24
    testRunner.Then("la liste des amis présents doit contenir \"Alice\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 25
    testRunner.And("la liste des amis présents doit contenir \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 26
    testRunner.And("la liste des amis présents doit contenir \"Charlie\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
#line 27
    testRunner.And("la liste des amis présents doit avoir 3 éléments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ajouter un ami avec un nom vide")]
        [Xunit.TraitAttribute("FeatureTitle", "Ajouter un nouvel ami à une statistique de jeu")]
        [Xunit.TraitAttribute("Description", "Ajouter un ami avec un nom vide")]
        public void AjouterUnAmiAvecUnNomVide()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ajouter un ami avec un nom vide", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
  this.FeatureBackground();
#line hidden
#line 30
    testRunner.Given("je souhaite ajouter un ami avec un nom vide", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Étant donné que ");
#line hidden
#line 31
    testRunner.When("j\'ajoute l\'ami \"\" à la liste des amis présents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 32
    testRunner.Then("la liste des amis présents doit contenir \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 33
    testRunner.And("la liste des amis présents doit avoir 1 élément", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ajouter un ami déjà présent dans la liste")]
        [Xunit.TraitAttribute("FeatureTitle", "Ajouter un nouvel ami à une statistique de jeu")]
        [Xunit.TraitAttribute("Description", "Ajouter un ami déjà présent dans la liste")]
        public void AjouterUnAmiDejaPresentDansLaListe()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ajouter un ami déjà présent dans la liste", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
  this.FeatureBackground();
#line hidden
#line 36
    testRunner.Given("la liste des amis présents contient déjà \"Alice\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Étant donné que ");
#line hidden
#line 37
    testRunner.When("j\'ajoute l\'ami \"Alice\" à la liste des amis présents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 38
    testRunner.Then("la liste des amis présents doit contenir \"Alice\" deux fois", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 39
    testRunner.And("la liste des amis présents doit avoir 2 éléments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ajouter un ami avec des caractères spéciaux")]
        [Xunit.TraitAttribute("FeatureTitle", "Ajouter un nouvel ami à une statistique de jeu")]
        [Xunit.TraitAttribute("Description", "Ajouter un ami avec des caractères spéciaux")]
        public void AjouterUnAmiAvecDesCaracteresSpeciaux()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ajouter un ami avec des caractères spéciaux", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
  this.FeatureBackground();
#line hidden
#line 42
    testRunner.Given("je souhaite ajouter un ami avec des caractères spéciaux", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Étant donné que ");
#line hidden
#line 43
    testRunner.When("j\'ajoute l\'ami \"Jean-Pierre\" à la liste des amis présents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 44
    testRunner.Then("la liste des amis présents doit contenir \"Jean-Pierre\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 45
    testRunner.And("la liste des amis présents doit avoir 1 élément", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ajouter un ami avec des espaces")]
        [Xunit.TraitAttribute("FeatureTitle", "Ajouter un nouvel ami à une statistique de jeu")]
        [Xunit.TraitAttribute("Description", "Ajouter un ami avec des espaces")]
        public void AjouterUnAmiAvecDesEspaces()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ajouter un ami avec des espaces", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
  this.FeatureBackground();
#line hidden
#line 48
    testRunner.Given("je souhaite ajouter un ami avec des espaces", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Étant donné que ");
#line hidden
#line 49
    testRunner.When("j\'ajoute l\'ami \" Marie Claire \" à la liste des amis présents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 50
    testRunner.Then("la liste des amis présents doit contenir \" Marie Claire \"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 51
    testRunner.And("la liste des amis présents doit avoir 1 élément", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Ajouter différents types d\'amis")]
        [Xunit.TraitAttribute("FeatureTitle", "Ajouter un nouvel ami à une statistique de jeu")]
        [Xunit.TraitAttribute("Description", "Ajouter différents types d\'amis")]
        [Xunit.InlineDataAttribute("Alexandre", new string[0])]
        [Xunit.InlineDataAttribute("Marie-Claire", new string[0])]
        [Xunit.InlineDataAttribute("Jean123", new string[0])]
        [Xunit.InlineDataAttribute("@Player1", new string[0])]
        [Xunit.InlineDataAttribute("User_2024", new string[0])]
        public void AjouterDifferentsTypesDamis(string nom_Ami, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("nom_ami", nom_Ami);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ajouter différents types d\'amis", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
  this.FeatureBackground();
#line hidden
#line 54
    testRunner.Given("je souhaite ajouter un ami", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Étant donné que ");
#line hidden
#line 55
    testRunner.When(string.Format("j\'ajoute l\'ami \"{0}\" à la liste des amis présents", nom_Ami), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
#line 56
    testRunner.Then(string.Format("la liste des amis présents doit contenir \"{0}\"", nom_Ami), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
#line 57
    testRunner.And("la liste des amis présents doit avoir 1 élément", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AjouterUnNouvelAmiAUneStatistiqueDeJeuFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AjouterUnNouvelAmiAUneStatistiqueDeJeuFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
